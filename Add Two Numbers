# You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. 
# Add the two numbers and return it as a linked list.
# Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
# Output: 7 -> 0 -> 8

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

#class Solution(object):
    def addTwoNumbers(self, l1, l2):
        if l1 is None:  return l2
        if l2 is None:  return l1
        flag = 0
        dummy = ListNode(0)
        walker = dummy
        while l1 and l2:
            sum = l1.val + l2.val + flag;
            walker.next = ListNode(sum % 10)
            flag = sum / 10
            walker = walker.next
            l1 = l1.next
            l2 = l2.next
        while l1:
            sum = l1.val + flag;
            walker.next = ListNode(sum % 10)
            flag = sum / 10
            walker = walker.next
            l1 = l1.next
        while l2:
            sum = l2.val + flag;
            walker.next = ListNode(sum % 10)
            flag = sum / 10
            walker = walker.next
            l2 = l2.next
        if flag > 0:
            walker.next = ListNode(flag)
        return dummy.next
